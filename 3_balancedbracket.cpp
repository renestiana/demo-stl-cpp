#include <bits/stdc++.h>
#include <stack>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'isBalanced' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

string isBalanced(string s) {
    pair<char, char> pair1('{','}');
    pair<char, char> pair2('[',']');
    pair<char, char> pair3('(',')');
    
    stack<char> stkChar;    
    
    int i, j=0;
    int stringLength = s.length(), halfLength = s.length()/2;
            
    if((stringLength%2) != 0)
        return "NO";
    else {        
        for(i=0;i<stringLength;i++){
            if(s.at(i) == pair1.first || s.at(i) == pair2.first || s.at(i) == pair3.first)
                stkChar.push(s.at(i));
            else {
                if(stkChar.empty())
                    return "NO";
                
                if(stkChar.top() != pair1.first && s.at(i) == pair1.second)
                    return "NO";
                else if(stkChar.top() != pair2.first && s.at(i) == pair2.second)
                    return "NO";
                else if(stkChar.top() != pair3.first && s.at(i) == pair3.second)
                    return "NO";
                else{
                    if((stkChar.top() == pair1.first && s.at(i) == pair1.second)||
                        (stkChar.top() == pair2.first && s.at(i) == pair2.second) ||
                            (stkChar.top() == pair3.first && s.at(i) == pair3.second)){
                                j++;
                                stkChar.pop();           
                    }
                }
                
            }  
        }
        if(j==halfLength)
            return "YES";        
    }
    return "";    
}

/*Automatically generated by hackerrank*/
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string s;
        getline(cin, s);

        string result = isBalanced(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
/*Automatically generated by hackerrank*/
string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}
/*Automatically generated by hackerrank*/
string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
